services:
    #
    # Local service
    #
    # This service will run "service crond status" command on local host when
    # 'status' action is called.
    #
    local:
        desc: Simplest service declaration
        actions:
            status:
                cmd: service crond status

    #
    # Distant service
    #
    # This service will run, in parallel, "service sshd status" command on host
    # listed by 'target' (foo, bar and baz) when 'status' action is called.
    #
    remote:
        desc: simple distant service
        target: foo,bar,baz
        actions:
            status:
                cmd: service sshd status

    #
    # Delegated mode
    # Apply.   service, actions
    # Default. standard
    #
    # "mode: [standard, delegate]"
    #
    # This mode uses a service with target, but command is run locally.
    # Milkcheck will manage the target like a distant service and so
    # all command line argument like -w or -x will be applied to target.
    # If this results into an empty target, no command will be run.
    # This is intended for commands which handle their own connection.
    #
    ping:
        desc: Ping all needed servers
        mode: delegate
        target: "@servers"
        actions:
            status:
                cmd: nodeset -S "\n" -e %TARGET | fping -r1 -u
            power:
                cmd: ipmipower -h %TARGET --stat

    #
    # Service group
    #
    # Several service could be grouped together and dependencies set
    # to the whole group.
    group:
        services:
            'svc1':
                actions:
                    start:
                        cmd: service one start
            'svc2':
                actions:
                    start:
                        cmd: service two start

    #
    # Service dependency
    #
    # Apply.    service
    # Default.  (no dependency)
    #
    # "require: <list>"
    #
    # Services can be sequenced, based on dependency between them. In the
    # example below, service 'svc2' will be launched after 'svc1' because it
    # requires it. Also, if service 'svc1' fails, svc2 will not be launched as
    # its dependencies are not fulfilled.
    svc1:
        actions:
           run:
              cmd: service svc1 start
    svc2:
        require: [ svc1 ]
        actions:
           run:
              cmd: service svc2 start

    #
    # Service ordering
    #
    # Apply.    service
    # Default.  (no ordering, everything in parallel)
    #
    # "after": <list>"
    #
    # Compatibility: "before"
    # This option was previously named 'before'. The 'before' keyword is still
    # working but is now deprecated and will be removed soon.
    #
    # By default, all independent services are run in parallel. You can prevent
    # this and control the order they will be run using 'after' option.
    # This is similar to 'require' option except that it does not check the
    # execution status of the pointed services. Whatever their results, the
    # execution will continue.
    jobs:
        actions:
           stop:
              cmd: service jobs stop
    power:
        after: [ jobs ]
        actions:
           stop:
              cmd: halt
    #
    # Fanout
    #
    # Apply.   service, actions
    # Default. 'fanout' value in milkcheck.conf
    #
    # "fanout: <integer>"
    #
    # Max number of concurrent execution of this command on the targets.
    limit:
        target: "foo[1-200]"
        fanout: 20
        actions:
            status:
                cmd: service sshd status

    #
    # Timeout
    #
    # Apply.   service, actions
    # Default. (no timeout)
    #
    # "timeout: <float>"
    #
    # Amount of time, in second, the command should complete before being
    # killed.
    countdown:
        actions:
            start:
                timeout: 2
                cmd: service sshd start

    #
    # Errors
    #
    # Apply.   service, actions
    # Default. 0
    #
    # "errors: <integer>"
    #
    # Number of command failure before the action is considered on error.
    tolerant:
        errors: 2
        target: "foo[1-10]"
        actions:
            start:
                cmd: service sshd start

    #
    # Delay
    #
    # Apply.   service, actions
    # Default. (no delay)
    #
    # "delay: <float>"
    #
    # Waiting time, in second, before action is effectively launched.
    # (See also 'retry')
    shifted:
        delay: 10
        actions:
            restart:
                cmd: /bin/restart

    #
    # Retry
    #
    # Apply.   service, actions
    # Default. (no retry)
    #
    # "retry: <integer>"
    #
    # Re-launch the action if it has failed, up to 'retry value' times.
    # 'delay' is awaited between each run. A 'delay' is no more mandatory when
    # using 'retry' (starting from v1.1).
    again:
        actions:
            restart:
                retry: 2
                cmd: /bin/relaunched

    #
    # Action aliases
    #
    # You can declare multiple actions, separating action name with comma.
    # This is useful to declare action name aliases, or if you combine it with
    # automatic variables (see below).
    # You can use a NodeSet-like syntax for action aliases (ie: change[01-10])
    multiple:
        desc: Multiple action in a single declaration
        actions:
            start,run:
                cmd: service foo start

    #
    # Automatic variables.
    #
    # Milkcheck generates a list of automatic variables depending
    # on context.
    # %FANOUT          current 'fanout'
    # %TIMEOUT         current 'timeout'
    # %TARGET          current 'target'
    # %DESC            current 'desc'
    # %SERVICE         service name
    # %ACTION          action name
    # %SELECTED_NODES  arguments of -x/--excluded command line flag
    # %EXCLUDED_NODES  arguments of -n/--nodes command line flag
    crond:
        desc: Command scheduler daemon crond
        target: "@webservers"
        actions:
            start,status,stop:
                # Equivalent to: 'service crond <ACTION_NAME>'
                cmd: service %SERVICE %ACTION

    #
    # External command execution
    #
    # %( ... ) pattern could be used to execute, locally, an external
    # shell command and be substitute by the command output.
    # This apply to: target, command and variables
    foo:
        target: "%(awk '!/^#/' /etc/hosts)"
        actions:
            start:
               cmd: service foo start

    #
    # Multiple sub-services
    #
    # Several subservices could be declared easily, separating their name with
    # comma, like for actions.
    # You can use a NodeSet-like syntax for the name pattern (ie: da[1-15])
    group:
        services:
            # This creates 3 sub-services with one 'start' action
            foo,bar,baz:
                actions:
                    start:
                        cmd: service %SERVICE %ACTION
