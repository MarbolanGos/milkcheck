# Copyright CEA (2011)
# Contributor: TATIBOUET Jeremie <tatibouetj@ocre.cea.fr>

'''
This module contains the UserView class definition.
'''

# classes
from MilkCheck.UI.UserView import UserView
from MilkCheck.Engine.Action import Action, NodeInfo
from MilkCheck.Engine.Service import Service

class CommandLineInterface(UserView):
    '''
    This class models the Command Line Interface which is a UserView. From
    this class you can get back events generated by the engine and send order
    to the ServiceManager.
    '''
    
    def ev_started(self, obj):
        '''
        Something has started on the object given as parameter. This migh be
        the beginning of a command one a node, an action or a service.
        '''
        if isinstance(obj, NodeInfo):
            pass
        elif isinstance(obj, Action):
            print " >>> [%s] action [%s] in Task" % \
            (obj.service.name, obj.name)
        elif isinstance(obj, Service):
            print '[%s] has started' % obj.name

    def ev_complete(self, obj):
        '''
        Something is complete on the object given as parameter. This migh be
        the end of a command on a node,  an action or a service.
        '''
        if isinstance(obj, NodeInfo):
            print '    ---> %s' % obj
        elif isinstance(obj, Action):
            print " >>> [%s] action [%s] processed in %f s" % \
            (obj.service.name, obj.name, obj.duration)
        elif isinstance(obj, Service):
            print " >>> [%s] processed" % obj.name

    def ev_status_changed(self, obj):
        '''
        Status of the object given as parameter. Actions or Service's status
        might have changed.
        '''
        if isinstance(obj, Action):
            print " >>> [%s] action [%s] is [%s] " % \
            (obj.service.name, obj.name, obj.status)
        elif isinstance(obj, Service):
            print " >>> [%s] status is [%s] " % (obj.name, obj.status)

    def ev_delayed(self, obj):
        '''
        Object given as parameter has been delayed. This event is only raised
        when an action was delayed
        '''
        if isinstance(obj, Action):
            print " >>> [%s] action [%s] has been delayed %i s" % \
            (obj.service.name, obj.name, obj.delay)

    def ev_trigger_dep(self, obj_source, obj_triggered):
        '''
        obj_source/obj_triggered might be an action or a service. This
        event is raised when the obj_source triggered another object. Sample :
        Action A triggers Action B
        Service A triggers Service B
        '''
        if isinstance(obj_source, Action) and \
                isinstance(obj_triggered, Action):
           print '[%s] Action [%s] triggers Action [%s]' % \
           (obj_source.service.name, obj_source.name, obj_triggered.name)
        elif isinstance(obj_source, Service) and \
                isinstance(obj_triggered, Service):
           print '[%s] triggers [%s]' % (obj_source.name, obj_triggered.name)
            