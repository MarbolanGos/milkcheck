# Copyright CEA (2011) 
# Contributor: TATIBOUET Jeremie <tatibouetj@ocre.cea.fr>

"""
This module contains the definition of the Base class of a service and the
defnition of the different states that a service can go through
"""

# Classes
from MilkCheck.Engine.BaseEntity import BaseEntity
from ClusterShell.Task import task_self

# Symbols
from MilkCheck.Engine.Dependency import CHECK, REQUIRE, REQUIRE_WEAK
from MilkCheck.Engine.BaseEntity import TIMED_OUT, TOO_MANY_ERRORS
from MilkCheck.Engine.BaseEntity import DONE, DONE_WITH_WARNINGS
from MilkCheck.Engine.BaseEntity import NO_STATUS, WAITING_STATUS, ERROR

"""
Symbols defining the differents status of a service
"""

class BaseService(BaseEntity):
    """
    This class is abstract and define the method that a service or a 
    group of service has to implement. In implementing an EventHandler
    this class can handler events generated by ClusterShell.
    """
    
    def __init__(self, name):
        BaseEntity.__init__(self, name)
        
        # Define whether the service has warnings
        self.warnings = False
        
        # Define a flag allowing us to specify that this service
        # is the original caller so we do not have to start his
        # children 
        self.origin = False

    def run(self, action_name):
        """Run the action_name over the current service."""
        
        # A service using run become the calling point
        self.origin = True
        
        # Prepare the service and start the master task
        self.prepare(action_name)
        task_self().resume()
        
    def prepare(self, action_name=None):
        """
        Abstract method which will be overriden in Service and ServiceGroup.
        """
        raise NotImplementedError

    def update_status(self, status):
        """
        Update the current service's status and can trigger his dependencies.
        """
        raise NotImplementedError